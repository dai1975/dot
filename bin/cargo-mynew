#!/bin/sh

getname() {
    while [ x$1 != x ]; do
        case x$1 in
            x-h | x--help | x--bin | x-v | x--verbose | x-q | x--quiet )
                shift
                ;;
            x--vcs | x--color )
                shift; shift
                ;;
            x--name )
                shift
                NAME=$1
                shift
                ;;
            x* )
                NAME=$1
                shift
                ;;
        esac
    done
    echo $NAME
}

shift

NAME=`getname $*`
cargo new $*

R=$?
if [ $R -ne 0 ]; then
    exit $R
fi

if [ ! -d $NAME ]; then
    echo "dir not found: $NAME"
    exit 1
fi

editorconfig() {
    EL=$NAME/.editorconfig
    if [ -e $EL ]; then
        echo "file already found: $EL"
        exit 1
    fi

    cat <<EOF >$EL
root = true

[*]
charset = utf-8
end_of_line = lf
insert_final_newline = true
indent_size = 4
indent_style = space
trim_trailing_whitespace = true
EOF
    #echo "$EL create."
}

rustfmt() {
    EL=$NAME/.rustfmt
    if [ -e $EL ]; then
        echo "file already found: $EL"
        exit 1
    fi

    cat <<EOF >$EL
EOF
    #echo "$EL create."
}

cargo() {
    EL=$NAME/Cargo.toml
    if [ ! -e $EL ]; then
        echo "file not found: $EL"
        exit 1
    fi

    cat <<EOF >>$EL
anyhow = "1.0"
thiserror = "1.0"

async-std = { version = "1.10", features = ["attributes"] }
futures = "0.3"

[dev-dependencies]
assert_matches = "1.5"
serial_test = "0.5"
EOF
    #echo "$EL create."
}

makefile() {
    EL=$NAME/Makefile
    if [ -e $EL ]; then
        echo "file already found: $EL"
        exit 1
    fi

    cat <<EOF >>$EL
VERSION=0.20220925
NAME=$NAME

build:
	cargo build

image:
	mkdir -p \$\$(pwd)/,container-cache && chmod 777 \$\$(pwd)/,container-cache
	buildah bud --layers -f Dockerfile -v \$\$(pwd)/,container-cache:/target -t \$(NAME):\$(VERSION) .
	buildah tag \$(NAME):\$(VERSION) loadwork:latest
	buildah tag \$(NAME):latest \$(CONTAINER_REGISTRY)/loadwork:latest
	buildah push \$(CONTAINER_REGISTRY)/\$(NAME):latest

test:
	\$(MAKE) test-doc

test:
	@RUST_BUCKTRACE=1 cargo test -- --nocapture

clean:
	find . -name "*~" -exec rm {} \;

.PHONY: build test doctest itest image
EOF
    #echo "$EL create."
}

gitignore() {
    EL=$NAME/.gitignore
    if [ -e $EL ]; then
        echo "file already found: $EL"
        exit 1
    fi

    cat <<EOF >>$EL
# Generated by Cargo
# will have compiled files and executables
debug/
target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
#Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb

# emacs
*~

# temporary filenames for me
,*
*-
EOF
    #echo "$EL create."
}

editorconfig
rustfmt
cargo
makefile
gitignore
